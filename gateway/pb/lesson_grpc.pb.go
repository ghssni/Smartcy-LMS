// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: lesson.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LessonService_CreateLesson_FullMethodName          = "/lessons.LessonService/CreateLesson"
	LessonService_GetLesson_FullMethodName             = "/lessons.LessonService/GetLesson"
	LessonService_GetLessonBySequence_FullMethodName   = "/lessons.LessonService/GetLessonBySequence"
	LessonService_ListLessons_FullMethodName           = "/lessons.LessonService/ListLessons"
	LessonService_UpdateLesson_FullMethodName          = "/lessons.LessonService/UpdateLesson"
	LessonService_DeleteLesson_FullMethodName          = "/lessons.LessonService/DeleteLesson"
	LessonService_SearchLessonsByTitle_FullMethodName  = "/lessons.LessonService/SearchLessonsByTitle"
	LessonService_SearchLessonsByType_FullMethodName   = "/lessons.LessonService/SearchLessonsByType"
	LessonService_GetTotalLessons_FullMethodName       = "/lessons.LessonService/GetTotalLessons"
	LessonService_GetTotalLessonsByType_FullMethodName = "/lessons.LessonService/GetTotalLessonsByType"
)

// LessonServiceClient is the client API for LessonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonServiceClient interface {
	// Create a new lesson
	CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*CreateLessonResponse, error)
	// Get a specific lesson by course_id and lesson id (excludes soft-deleted)
	GetLesson(ctx context.Context, in *GetLessonRequest, opts ...grpc.CallOption) (*GetLessonResponse, error)
	// Get a lesson by course_id and sequence (excludes soft-deleted)
	GetLessonBySequence(ctx context.Context, in *GetLessonBySequenceRequest, opts ...grpc.CallOption) (*GetLessonBySequenceResponse, error)
	// List all lessons by course_id (excludes soft-deleted)
	ListLessons(ctx context.Context, in *ListLessonsRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error)
	// Update a lesson
	UpdateLesson(ctx context.Context, in *UpdateLessonRequest, opts ...grpc.CallOption) (*UpdateLessonResponse, error)
	// Soft delete a lesson
	DeleteLesson(ctx context.Context, in *DeleteLessonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Search lessons by title within a course (excludes soft-deleted)
	SearchLessonsByTitle(ctx context.Context, in *SearchLessonsByTitleRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error)
	// Search lessons by lesson type within a course (excludes soft-deleted)
	SearchLessonsByType(ctx context.Context, in *SearchLessonsByTypeRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error)
	// Get the total number of lessons for a course (excludes soft-deleted)
	GetTotalLessons(ctx context.Context, in *GetTotalLessonsRequest, opts ...grpc.CallOption) (*GetTotalLessonsResponse, error)
	// Get total lessons by lesson type (video/article) for a course (excludes soft-deleted)
	GetTotalLessonsByType(ctx context.Context, in *GetTotalLessonsByTypeRequest, opts ...grpc.CallOption) (*GetTotalLessonsResponse, error)
}

type lessonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonServiceClient(cc grpc.ClientConnInterface) LessonServiceClient {
	return &lessonServiceClient{cc}
}

func (c *lessonServiceClient) CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*CreateLessonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLessonResponse)
	err := c.cc.Invoke(ctx, LessonService_CreateLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GetLesson(ctx context.Context, in *GetLessonRequest, opts ...grpc.CallOption) (*GetLessonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLessonResponse)
	err := c.cc.Invoke(ctx, LessonService_GetLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GetLessonBySequence(ctx context.Context, in *GetLessonBySequenceRequest, opts ...grpc.CallOption) (*GetLessonBySequenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLessonBySequenceResponse)
	err := c.cc.Invoke(ctx, LessonService_GetLessonBySequence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) ListLessons(ctx context.Context, in *ListLessonsRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLessonsResponse)
	err := c.cc.Invoke(ctx, LessonService_ListLessons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) UpdateLesson(ctx context.Context, in *UpdateLessonRequest, opts ...grpc.CallOption) (*UpdateLessonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLessonResponse)
	err := c.cc.Invoke(ctx, LessonService_UpdateLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) DeleteLesson(ctx context.Context, in *DeleteLessonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LessonService_DeleteLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) SearchLessonsByTitle(ctx context.Context, in *SearchLessonsByTitleRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLessonsResponse)
	err := c.cc.Invoke(ctx, LessonService_SearchLessonsByTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) SearchLessonsByType(ctx context.Context, in *SearchLessonsByTypeRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLessonsResponse)
	err := c.cc.Invoke(ctx, LessonService_SearchLessonsByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GetTotalLessons(ctx context.Context, in *GetTotalLessonsRequest, opts ...grpc.CallOption) (*GetTotalLessonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTotalLessonsResponse)
	err := c.cc.Invoke(ctx, LessonService_GetTotalLessons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GetTotalLessonsByType(ctx context.Context, in *GetTotalLessonsByTypeRequest, opts ...grpc.CallOption) (*GetTotalLessonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTotalLessonsResponse)
	err := c.cc.Invoke(ctx, LessonService_GetTotalLessonsByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonServiceServer is the server API for LessonService service.
// All implementations should embed UnimplementedLessonServiceServer
// for forward compatibility.
type LessonServiceServer interface {
	// Create a new lesson
	CreateLesson(context.Context, *CreateLessonRequest) (*CreateLessonResponse, error)
	// Get a specific lesson by course_id and lesson id (excludes soft-deleted)
	GetLesson(context.Context, *GetLessonRequest) (*GetLessonResponse, error)
	// Get a lesson by course_id and sequence (excludes soft-deleted)
	GetLessonBySequence(context.Context, *GetLessonBySequenceRequest) (*GetLessonBySequenceResponse, error)
	// List all lessons by course_id (excludes soft-deleted)
	ListLessons(context.Context, *ListLessonsRequest) (*ListLessonsResponse, error)
	// Update a lesson
	UpdateLesson(context.Context, *UpdateLessonRequest) (*UpdateLessonResponse, error)
	// Soft delete a lesson
	DeleteLesson(context.Context, *DeleteLessonRequest) (*emptypb.Empty, error)
	// Search lessons by title within a course (excludes soft-deleted)
	SearchLessonsByTitle(context.Context, *SearchLessonsByTitleRequest) (*ListLessonsResponse, error)
	// Search lessons by lesson type within a course (excludes soft-deleted)
	SearchLessonsByType(context.Context, *SearchLessonsByTypeRequest) (*ListLessonsResponse, error)
	// Get the total number of lessons for a course (excludes soft-deleted)
	GetTotalLessons(context.Context, *GetTotalLessonsRequest) (*GetTotalLessonsResponse, error)
	// Get total lessons by lesson type (video/article) for a course (excludes soft-deleted)
	GetTotalLessonsByType(context.Context, *GetTotalLessonsByTypeRequest) (*GetTotalLessonsResponse, error)
}

// UnimplementedLessonServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLessonServiceServer struct{}

func (UnimplementedLessonServiceServer) CreateLesson(context.Context, *CreateLessonRequest) (*CreateLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLesson not implemented")
}
func (UnimplementedLessonServiceServer) GetLesson(context.Context, *GetLessonRequest) (*GetLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLesson not implemented")
}
func (UnimplementedLessonServiceServer) GetLessonBySequence(context.Context, *GetLessonBySequenceRequest) (*GetLessonBySequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLessonBySequence not implemented")
}
func (UnimplementedLessonServiceServer) ListLessons(context.Context, *ListLessonsRequest) (*ListLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLessons not implemented")
}
func (UnimplementedLessonServiceServer) UpdateLesson(context.Context, *UpdateLessonRequest) (*UpdateLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLesson not implemented")
}
func (UnimplementedLessonServiceServer) DeleteLesson(context.Context, *DeleteLessonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLesson not implemented")
}
func (UnimplementedLessonServiceServer) SearchLessonsByTitle(context.Context, *SearchLessonsByTitleRequest) (*ListLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLessonsByTitle not implemented")
}
func (UnimplementedLessonServiceServer) SearchLessonsByType(context.Context, *SearchLessonsByTypeRequest) (*ListLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLessonsByType not implemented")
}
func (UnimplementedLessonServiceServer) GetTotalLessons(context.Context, *GetTotalLessonsRequest) (*GetTotalLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalLessons not implemented")
}
func (UnimplementedLessonServiceServer) GetTotalLessonsByType(context.Context, *GetTotalLessonsByTypeRequest) (*GetTotalLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalLessonsByType not implemented")
}
func (UnimplementedLessonServiceServer) testEmbeddedByValue() {}

// UnsafeLessonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonServiceServer will
// result in compilation errors.
type UnsafeLessonServiceServer interface {
	mustEmbedUnimplementedLessonServiceServer()
}

func RegisterLessonServiceServer(s grpc.ServiceRegistrar, srv LessonServiceServer) {
	// If the following call pancis, it indicates UnimplementedLessonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LessonService_ServiceDesc, srv)
}

func _LessonService_CreateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).CreateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_CreateLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).CreateLesson(ctx, req.(*CreateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GetLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GetLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GetLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GetLesson(ctx, req.(*GetLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GetLessonBySequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonBySequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GetLessonBySequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GetLessonBySequence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GetLessonBySequence(ctx, req.(*GetLessonBySequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_ListLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLessonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).ListLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_ListLessons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).ListLessons(ctx, req.(*ListLessonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_UpdateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).UpdateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_UpdateLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).UpdateLesson(ctx, req.(*UpdateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_DeleteLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).DeleteLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_DeleteLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).DeleteLesson(ctx, req.(*DeleteLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_SearchLessonsByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLessonsByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).SearchLessonsByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_SearchLessonsByTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).SearchLessonsByTitle(ctx, req.(*SearchLessonsByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_SearchLessonsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLessonsByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).SearchLessonsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_SearchLessonsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).SearchLessonsByType(ctx, req.(*SearchLessonsByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GetTotalLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalLessonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GetTotalLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GetTotalLessons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GetTotalLessons(ctx, req.(*GetTotalLessonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GetTotalLessonsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalLessonsByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GetTotalLessonsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LessonService_GetTotalLessonsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GetTotalLessonsByType(ctx, req.(*GetTotalLessonsByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LessonService_ServiceDesc is the grpc.ServiceDesc for LessonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LessonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lessons.LessonService",
	HandlerType: (*LessonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLesson",
			Handler:    _LessonService_CreateLesson_Handler,
		},
		{
			MethodName: "GetLesson",
			Handler:    _LessonService_GetLesson_Handler,
		},
		{
			MethodName: "GetLessonBySequence",
			Handler:    _LessonService_GetLessonBySequence_Handler,
		},
		{
			MethodName: "ListLessons",
			Handler:    _LessonService_ListLessons_Handler,
		},
		{
			MethodName: "UpdateLesson",
			Handler:    _LessonService_UpdateLesson_Handler,
		},
		{
			MethodName: "DeleteLesson",
			Handler:    _LessonService_DeleteLesson_Handler,
		},
		{
			MethodName: "SearchLessonsByTitle",
			Handler:    _LessonService_SearchLessonsByTitle_Handler,
		},
		{
			MethodName: "SearchLessonsByType",
			Handler:    _LessonService_SearchLessonsByType_Handler,
		},
		{
			MethodName: "GetTotalLessons",
			Handler:    _LessonService_GetTotalLessons_Handler,
		},
		{
			MethodName: "GetTotalLessonsByType",
			Handler:    _LessonService_GetTotalLessonsByType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lesson.proto",
}
