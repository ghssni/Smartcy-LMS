// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: enrollment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnrollmentService_CreateEnrollment_FullMethodName          = "/enrollment.EnrollmentService/CreateEnrollment"
	EnrollmentService_DeleteEnrollmentById_FullMethodName      = "/enrollment.EnrollmentService/DeleteEnrollmentById"
	EnrollmentService_GetEnrollmentsByStudentId_FullMethodName = "/enrollment.EnrollmentService/GetEnrollmentsByStudentId"
)

// EnrollmentServiceClient is the client API for EnrollmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// endpoints
type EnrollmentServiceClient interface {
	// Create an enrollment
	CreateEnrollment(ctx context.Context, in *CreateEnrollmentRequest, opts ...grpc.CallOption) (*CreateEnrollmentResponse, error)
	// Delete an enrollment by ID
	DeleteEnrollmentById(ctx context.Context, in *DeleteEnrollmentByIdRequest, opts ...grpc.CallOption) (*DeleteEnrollmentByIdResponse, error)
	// Get all enrollments by student ID
	GetEnrollmentsByStudentId(ctx context.Context, in *GetEnrollmentsByStudentIdRequest, opts ...grpc.CallOption) (*GetEnrollmentsByStudentIdResponse, error)
}

type enrollmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnrollmentServiceClient(cc grpc.ClientConnInterface) EnrollmentServiceClient {
	return &enrollmentServiceClient{cc}
}

func (c *enrollmentServiceClient) CreateEnrollment(ctx context.Context, in *CreateEnrollmentRequest, opts ...grpc.CallOption) (*CreateEnrollmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnrollmentResponse)
	err := c.cc.Invoke(ctx, EnrollmentService_CreateEnrollment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentServiceClient) DeleteEnrollmentById(ctx context.Context, in *DeleteEnrollmentByIdRequest, opts ...grpc.CallOption) (*DeleteEnrollmentByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEnrollmentByIdResponse)
	err := c.cc.Invoke(ctx, EnrollmentService_DeleteEnrollmentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentServiceClient) GetEnrollmentsByStudentId(ctx context.Context, in *GetEnrollmentsByStudentIdRequest, opts ...grpc.CallOption) (*GetEnrollmentsByStudentIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnrollmentsByStudentIdResponse)
	err := c.cc.Invoke(ctx, EnrollmentService_GetEnrollmentsByStudentId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnrollmentServiceServer is the server API for EnrollmentService service.
// All implementations should embed UnimplementedEnrollmentServiceServer
// for forward compatibility.
//
// endpoints
type EnrollmentServiceServer interface {
	// Create an enrollment
	CreateEnrollment(context.Context, *CreateEnrollmentRequest) (*CreateEnrollmentResponse, error)
	// Delete an enrollment by ID
	DeleteEnrollmentById(context.Context, *DeleteEnrollmentByIdRequest) (*DeleteEnrollmentByIdResponse, error)
	// Get all enrollments by student ID
	GetEnrollmentsByStudentId(context.Context, *GetEnrollmentsByStudentIdRequest) (*GetEnrollmentsByStudentIdResponse, error)
}

// UnimplementedEnrollmentServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnrollmentServiceServer struct{}

func (UnimplementedEnrollmentServiceServer) CreateEnrollment(context.Context, *CreateEnrollmentRequest) (*CreateEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnrollment not implemented")
}
func (UnimplementedEnrollmentServiceServer) DeleteEnrollmentById(context.Context, *DeleteEnrollmentByIdRequest) (*DeleteEnrollmentByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnrollmentById not implemented")
}
func (UnimplementedEnrollmentServiceServer) GetEnrollmentsByStudentId(context.Context, *GetEnrollmentsByStudentIdRequest) (*GetEnrollmentsByStudentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollmentsByStudentId not implemented")
}
func (UnimplementedEnrollmentServiceServer) testEmbeddedByValue() {}

// UnsafeEnrollmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnrollmentServiceServer will
// result in compilation errors.
type UnsafeEnrollmentServiceServer interface {
	mustEmbedUnimplementedEnrollmentServiceServer()
}

func RegisterEnrollmentServiceServer(s grpc.ServiceRegistrar, srv EnrollmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnrollmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnrollmentService_ServiceDesc, srv)
}

func _EnrollmentService_CreateEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).CreateEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrollmentService_CreateEnrollment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).CreateEnrollment(ctx, req.(*CreateEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentService_DeleteEnrollmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnrollmentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).DeleteEnrollmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrollmentService_DeleteEnrollmentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).DeleteEnrollmentById(ctx, req.(*DeleteEnrollmentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentService_GetEnrollmentsByStudentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnrollmentsByStudentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).GetEnrollmentsByStudentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrollmentService_GetEnrollmentsByStudentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).GetEnrollmentsByStudentId(ctx, req.(*GetEnrollmentsByStudentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnrollmentService_ServiceDesc is the grpc.ServiceDesc for EnrollmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnrollmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enrollment.EnrollmentService",
	HandlerType: (*EnrollmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEnrollment",
			Handler:    _EnrollmentService_CreateEnrollment_Handler,
		},
		{
			MethodName: "DeleteEnrollmentById",
			Handler:    _EnrollmentService_DeleteEnrollmentById_Handler,
		},
		{
			MethodName: "GetEnrollmentsByStudentId",
			Handler:    _EnrollmentService_GetEnrollmentsByStudentId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enrollment.proto",
}
