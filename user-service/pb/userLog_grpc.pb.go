// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: userLog.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserActivityLogService_CreateUserActivityLog_FullMethodName = "/proto.UserActivityLogService/CreateUserActivityLog"
	UserActivityLogService_GetUserActivityLogs_FullMethodName   = "/proto.UserActivityLogService/GetUserActivityLogs"
)

// UserActivityLogServiceClient is the client API for UserActivityLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Activity Log Service Definition
type UserActivityLogServiceClient interface {
	CreateUserActivityLog(ctx context.Context, in *CreateUserActivityLogRequest, opts ...grpc.CallOption) (*CreateUserActivityLogResponse, error)
	GetUserActivityLogs(ctx context.Context, in *GetUserActivityLogsRequest, opts ...grpc.CallOption) (*GetUserActivityLogsResponse, error)
}

type userActivityLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserActivityLogServiceClient(cc grpc.ClientConnInterface) UserActivityLogServiceClient {
	return &userActivityLogServiceClient{cc}
}

func (c *userActivityLogServiceClient) CreateUserActivityLog(ctx context.Context, in *CreateUserActivityLogRequest, opts ...grpc.CallOption) (*CreateUserActivityLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserActivityLogResponse)
	err := c.cc.Invoke(ctx, UserActivityLogService_CreateUserActivityLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActivityLogServiceClient) GetUserActivityLogs(ctx context.Context, in *GetUserActivityLogsRequest, opts ...grpc.CallOption) (*GetUserActivityLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserActivityLogsResponse)
	err := c.cc.Invoke(ctx, UserActivityLogService_GetUserActivityLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserActivityLogServiceServer is the server API for UserActivityLogService service.
// All implementations must embed UnimplementedUserActivityLogServiceServer
// for forward compatibility.
//
// Activity Log Service Definition
type UserActivityLogServiceServer interface {
	CreateUserActivityLog(context.Context, *CreateUserActivityLogRequest) (*CreateUserActivityLogResponse, error)
	GetUserActivityLogs(context.Context, *GetUserActivityLogsRequest) (*GetUserActivityLogsResponse, error)
	mustEmbedUnimplementedUserActivityLogServiceServer()
}

// UnimplementedUserActivityLogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserActivityLogServiceServer struct{}

func (UnimplementedUserActivityLogServiceServer) CreateUserActivityLog(context.Context, *CreateUserActivityLogRequest) (*CreateUserActivityLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserActivityLog not implemented")
}
func (UnimplementedUserActivityLogServiceServer) GetUserActivityLogs(context.Context, *GetUserActivityLogsRequest) (*GetUserActivityLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserActivityLogs not implemented")
}
func (UnimplementedUserActivityLogServiceServer) mustEmbedUnimplementedUserActivityLogServiceServer() {
}
func (UnimplementedUserActivityLogServiceServer) testEmbeddedByValue() {}

// UnsafeUserActivityLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserActivityLogServiceServer will
// result in compilation errors.
type UnsafeUserActivityLogServiceServer interface {
	mustEmbedUnimplementedUserActivityLogServiceServer()
}

func RegisterUserActivityLogServiceServer(s grpc.ServiceRegistrar, srv UserActivityLogServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserActivityLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserActivityLogService_ServiceDesc, srv)
}

func _UserActivityLogService_CreateUserActivityLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserActivityLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActivityLogServiceServer).CreateUserActivityLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserActivityLogService_CreateUserActivityLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActivityLogServiceServer).CreateUserActivityLog(ctx, req.(*CreateUserActivityLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserActivityLogService_GetUserActivityLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserActivityLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActivityLogServiceServer).GetUserActivityLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserActivityLogService_GetUserActivityLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActivityLogServiceServer).GetUserActivityLogs(ctx, req.(*GetUserActivityLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserActivityLogService_ServiceDesc is the grpc.ServiceDesc for UserActivityLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserActivityLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserActivityLogService",
	HandlerType: (*UserActivityLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserActivityLog",
			Handler:    _UserActivityLogService_CreateUserActivityLog_Handler,
		},
		{
			MethodName: "GetUserActivityLogs",
			Handler:    _UserActivityLogService_GetUserActivityLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userLog.proto",
}
