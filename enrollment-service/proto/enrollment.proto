syntax = "proto3";
package enrollment;

import "google/protobuf/timestamp.proto";
import "meta.proto";
import "google/api/annotations.proto";
option go_package = "proto/enrollment;enrollment";


message Enrollment {
    uint32 id = 1;
    string student_id = 2;
    uint32 course_id = 3;
    string payment_status = 4;
    google.protobuf.Timestamp enrolled_at = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
}

// get all enrollments
message GetAllEnrollmentsRequest {
    string student_id = 1;
    uint32 page = 2;
    uint32 limit = 3;
}

message GetAllEnrollmentsResponse {
    meta.Meta meta = 1;
    repeated Enrollment enrollments = 2;
}

// get enrollment by id
message GetEnrollmentByIdRequest {
    uint32 id = 1;
}

message GetEnrollmentByIdResponse {
    meta.Meta meta = 1;
    Enrollment enrollment = 2;
}

// create enrollment
message CreateEnrollmentRequest {
    string student_id = 1;
    uint32 course_id = 2;
    string payment_status = 3;
    google.protobuf.Timestamp enrolled_at = 4;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
}

message CreateEnrollmentResponse {
    meta.Meta meta = 1;
    Enrollment enrollment = 2;
}

// update enrollment
message UpdateEnrollmentRequest {
    string id = 1;
    string student_id = 2;
    uint32 course_id = 3;
    string payment_status = 4;
    google.protobuf.Timestamp enrolled_at = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
}

message UpdateEnrollmentResponse {
    meta.Meta meta = 1;
    Enrollment enrollment = 2;
}

// delete enrollment
message DeleteEnrollmentRequest {
    string id = 1;
}

message DeleteEnrollmentResponse {
    meta.Meta meta = 1;
}

// get enrollments by student id
message GetEnrollmentsByStudentIdRequest {
    string student_id = 1;
}

message GetEnrollmentsByStudentIdResponse {
    meta.Meta meta = 1;
    repeated Enrollment enrollments = 2;
}

// get enrollments by course id
message GetEnrollmentsByCourseIdRequest {
    uint32 course_id = 1;
}

message GetEnrollmentsByCourseIdResponse {
    meta.Meta meta = 1;
    repeated Enrollment enrollments = 2;
}


//endpoints
service EnrollmentService {
    // Get all enrollments with optional pagination
    rpc GetAllEnrollments(GetAllEnrollmentsRequest) returns (GetAllEnrollmentsResponse) {
        option (google.api.http) = {
            get: "/v1/enrollments"
        };
    }

    // Get enrollment by ID
    rpc GetEnrollmentById(GetEnrollmentByIdRequest) returns (GetEnrollmentByIdResponse) {
        option (google.api.http) = {
            get: "/v1/enrollments/{id}"
        };
    }

    // Create a new enrollment
    rpc CreateEnrollment(CreateEnrollmentRequest) returns (CreateEnrollmentResponse) {
        option (google.api.http) = {
            post: "/v1/enrollments"
            body: "*"
        };
    }

    // Update an existing enrollment by ID
    rpc UpdateEnrollment(UpdateEnrollmentRequest) returns (UpdateEnrollmentResponse) {
        option (google.api.http) = {
            put: "/v1/enrollments/{id}"
            body: "*"
        };
    }

    // Delete an enrollment by ID
    rpc DeleteEnrollment(DeleteEnrollmentRequest) returns (DeleteEnrollmentResponse) {
        option (google.api.http) = {
            delete: "/v1/enrollments/{id}"
        };
    }

    // Get all enrollments by student ID
    rpc GetEnrollmentsByStudentId(GetEnrollmentsByStudentIdRequest) returns (GetEnrollmentsByStudentIdResponse) {
        option (google.api.http) = {
            get: "/v1/enrollments/student/{student_id}"
        };
    }

    // Get all enrollments by course ID
    rpc GetEnrollmentsByCourseId(GetEnrollmentsByCourseIdRequest) returns (GetEnrollmentsByCourseIdResponse) {
        option (google.api.http) = {
            get: "/v1/enrollments/course/{course_id}"
        };
    }
}