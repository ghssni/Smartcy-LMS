// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: payments/payments.proto

package payments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentsService_GetPaymentByEnrollmentId_FullMethodName   = "/payments.PaymentsService/GetPaymentByEnrollmentId"
	PaymentsService_UpdateExpiredPaymentStatus_FullMethodName = "/payments.PaymentsService/UpdateExpiredPaymentStatus"
	PaymentsService_HandleWebhook_FullMethodName              = "/payments.PaymentsService/HandleWebhook"
)

// PaymentsServiceClient is the client API for PaymentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// endpoints
type PaymentsServiceClient interface {
	GetPaymentByEnrollmentId(ctx context.Context, in *GetPaymentByEnrollmentIdRequest, opts ...grpc.CallOption) (*GetPaymentByEnrollmentIdResponse, error)
	UpdateExpiredPaymentStatus(ctx context.Context, in *UpdateExpiredPaymentStatusRequest, opts ...grpc.CallOption) (*UpdateExpiredPaymentStatusResponse, error)
	HandleWebhook(ctx context.Context, in *HandleWebhookRequest, opts ...grpc.CallOption) (*HandleWebhookResponse, error)
}

type paymentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentsServiceClient(cc grpc.ClientConnInterface) PaymentsServiceClient {
	return &paymentsServiceClient{cc}
}

func (c *paymentsServiceClient) GetPaymentByEnrollmentId(ctx context.Context, in *GetPaymentByEnrollmentIdRequest, opts ...grpc.CallOption) (*GetPaymentByEnrollmentIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentByEnrollmentIdResponse)
	err := c.cc.Invoke(ctx, PaymentsService_GetPaymentByEnrollmentId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) UpdateExpiredPaymentStatus(ctx context.Context, in *UpdateExpiredPaymentStatusRequest, opts ...grpc.CallOption) (*UpdateExpiredPaymentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExpiredPaymentStatusResponse)
	err := c.cc.Invoke(ctx, PaymentsService_UpdateExpiredPaymentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) HandleWebhook(ctx context.Context, in *HandleWebhookRequest, opts ...grpc.CallOption) (*HandleWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleWebhookResponse)
	err := c.cc.Invoke(ctx, PaymentsService_HandleWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentsServiceServer is the server API for PaymentsService service.
// All implementations must embed UnimplementedPaymentsServiceServer
// for forward compatibility.
//
// endpoints
type PaymentsServiceServer interface {
	GetPaymentByEnrollmentId(context.Context, *GetPaymentByEnrollmentIdRequest) (*GetPaymentByEnrollmentIdResponse, error)
	UpdateExpiredPaymentStatus(context.Context, *UpdateExpiredPaymentStatusRequest) (*UpdateExpiredPaymentStatusResponse, error)
	HandleWebhook(context.Context, *HandleWebhookRequest) (*HandleWebhookResponse, error)
	mustEmbedUnimplementedPaymentsServiceServer()
}

// UnimplementedPaymentsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentsServiceServer struct{}

func (UnimplementedPaymentsServiceServer) GetPaymentByEnrollmentId(context.Context, *GetPaymentByEnrollmentIdRequest) (*GetPaymentByEnrollmentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentByEnrollmentId not implemented")
}
func (UnimplementedPaymentsServiceServer) UpdateExpiredPaymentStatus(context.Context, *UpdateExpiredPaymentStatusRequest) (*UpdateExpiredPaymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExpiredPaymentStatus not implemented")
}
func (UnimplementedPaymentsServiceServer) HandleWebhook(context.Context, *HandleWebhookRequest) (*HandleWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleWebhook not implemented")
}
func (UnimplementedPaymentsServiceServer) mustEmbedUnimplementedPaymentsServiceServer() {}
func (UnimplementedPaymentsServiceServer) testEmbeddedByValue()                         {}

// UnsafePaymentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentsServiceServer will
// result in compilation errors.
type UnsafePaymentsServiceServer interface {
	mustEmbedUnimplementedPaymentsServiceServer()
}

func RegisterPaymentsServiceServer(s grpc.ServiceRegistrar, srv PaymentsServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentsService_ServiceDesc, srv)
}

func _PaymentsService_GetPaymentByEnrollmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentByEnrollmentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).GetPaymentByEnrollmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentsService_GetPaymentByEnrollmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).GetPaymentByEnrollmentId(ctx, req.(*GetPaymentByEnrollmentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_UpdateExpiredPaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpiredPaymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).UpdateExpiredPaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentsService_UpdateExpiredPaymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).UpdateExpiredPaymentStatus(ctx, req.(*UpdateExpiredPaymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_HandleWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).HandleWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentsService_HandleWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).HandleWebhook(ctx, req.(*HandleWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentsService_ServiceDesc is the grpc.ServiceDesc for PaymentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments.PaymentsService",
	HandlerType: (*PaymentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaymentByEnrollmentId",
			Handler:    _PaymentsService_GetPaymentByEnrollmentId_Handler,
		},
		{
			MethodName: "UpdateExpiredPaymentStatus",
			Handler:    _PaymentsService_UpdateExpiredPaymentStatus_Handler,
		},
		{
			MethodName: "HandleWebhook",
			Handler:    _PaymentsService_HandleWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payments/payments.proto",
}
