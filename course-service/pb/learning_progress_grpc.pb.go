// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: learning_progress.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LearningProgressService_MarkLessonAsCompleted_FullMethodName     = "/learning_progress.LearningProgressService/MarkLessonAsCompleted"
	LearningProgressService_ResetLessonMark_FullMethodName           = "/learning_progress.LearningProgressService/ResetLessonMark"
	LearningProgressService_ResetAllLessonMarks_FullMethodName       = "/learning_progress.LearningProgressService/ResetAllLessonMarks"
	LearningProgressService_GetTotalCompletedLessons_FullMethodName  = "/learning_progress.LearningProgressService/GetTotalCompletedLessons"
	LearningProgressService_GetTotalCompletedProgress_FullMethodName = "/learning_progress.LearningProgressService/GetTotalCompletedProgress"
	LearningProgressService_ListLearningProgress_FullMethodName      = "/learning_progress.LearningProgressService/ListLearningProgress"
	LearningProgressService_UpdateLastAccessed_FullMethodName        = "/learning_progress.LearningProgressService/UpdateLastAccessed"
)

// LearningProgressServiceClient is the client API for LearningProgressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Service for managing learning progress, including marking lessons as completed,
// resetting lesson progress, tracking total progress, and updating access timestamps.
type LearningProgressServiceClient interface {
	// *
	// Marks a lesson as completed.
	// If the lesson has already been marked as completed, updates the completion timestamp.
	// Creates a new learning progress record if none exists.
	MarkLessonAsCompleted(ctx context.Context, in *MarkLessonAsCompletedRequest, opts ...grpc.CallOption) (*MarkLessonAsCompletedResponse, error)
	// *
	// Resets the progress of a specific lesson, removing its completion status.
	// This essentially allows a user to restart or reattempt a lesson.
	ResetLessonMark(ctx context.Context, in *ResetLessonMarkRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// *
	// Resets all lesson marks for a specific enrollment.
	// This operation removes the completion status of all lessons for a specific enrollment ID.
	ResetAllLessonMarks(ctx context.Context, in *ResetAllLessonMarksRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// *
	// Retrieves the total number of lessons completed for a specific enrollment.
	// This is useful for tracking the learner's progress within a course.
	GetTotalCompletedLessons(ctx context.Context, in *GetTotalCompletedLessonsRequest, opts ...grpc.CallOption) (*CompletedProgress, error)
	// *
	// Retrieves the total completed learning progress for all enrollments.
	// It returns a list of progress summaries for multiple enrollments.
	GetTotalCompletedProgress(ctx context.Context, in *GetTotalCompletedProgressRequest, opts ...grpc.CallOption) (*GetTotalCompletedProgressResponse, error)
	// *
	// Lists all learning progress records for a specific enrollment.
	// This can be used to display the progress of all lessons within a course for a user.
	ListLearningProgress(ctx context.Context, in *ListLearningProgressRequest, opts ...grpc.CallOption) (*ListLearningProgressResponse, error)
	// *
	// Updates the last accessed timestamp for a lesson.
	// This is used to track when a user revisits a completed lesson.
	UpdateLastAccessed(ctx context.Context, in *UpdateLastAccessedRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type learningProgressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningProgressServiceClient(cc grpc.ClientConnInterface) LearningProgressServiceClient {
	return &learningProgressServiceClient{cc}
}

func (c *learningProgressServiceClient) MarkLessonAsCompleted(ctx context.Context, in *MarkLessonAsCompletedRequest, opts ...grpc.CallOption) (*MarkLessonAsCompletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkLessonAsCompletedResponse)
	err := c.cc.Invoke(ctx, LearningProgressService_MarkLessonAsCompleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningProgressServiceClient) ResetLessonMark(ctx context.Context, in *ResetLessonMarkRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, LearningProgressService_ResetLessonMark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningProgressServiceClient) ResetAllLessonMarks(ctx context.Context, in *ResetAllLessonMarksRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, LearningProgressService_ResetAllLessonMarks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningProgressServiceClient) GetTotalCompletedLessons(ctx context.Context, in *GetTotalCompletedLessonsRequest, opts ...grpc.CallOption) (*CompletedProgress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompletedProgress)
	err := c.cc.Invoke(ctx, LearningProgressService_GetTotalCompletedLessons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningProgressServiceClient) GetTotalCompletedProgress(ctx context.Context, in *GetTotalCompletedProgressRequest, opts ...grpc.CallOption) (*GetTotalCompletedProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTotalCompletedProgressResponse)
	err := c.cc.Invoke(ctx, LearningProgressService_GetTotalCompletedProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningProgressServiceClient) ListLearningProgress(ctx context.Context, in *ListLearningProgressRequest, opts ...grpc.CallOption) (*ListLearningProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLearningProgressResponse)
	err := c.cc.Invoke(ctx, LearningProgressService_ListLearningProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningProgressServiceClient) UpdateLastAccessed(ctx context.Context, in *UpdateLastAccessedRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, LearningProgressService_UpdateLastAccessed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningProgressServiceServer is the server API for LearningProgressService service.
// All implementations should embed UnimplementedLearningProgressServiceServer
// for forward compatibility.
//
// *
// Service for managing learning progress, including marking lessons as completed,
// resetting lesson progress, tracking total progress, and updating access timestamps.
type LearningProgressServiceServer interface {
	// *
	// Marks a lesson as completed.
	// If the lesson has already been marked as completed, updates the completion timestamp.
	// Creates a new learning progress record if none exists.
	MarkLessonAsCompleted(context.Context, *MarkLessonAsCompletedRequest) (*MarkLessonAsCompletedResponse, error)
	// *
	// Resets the progress of a specific lesson, removing its completion status.
	// This essentially allows a user to restart or reattempt a lesson.
	ResetLessonMark(context.Context, *ResetLessonMarkRequest) (*empty.Empty, error)
	// *
	// Resets all lesson marks for a specific enrollment.
	// This operation removes the completion status of all lessons for a specific enrollment ID.
	ResetAllLessonMarks(context.Context, *ResetAllLessonMarksRequest) (*empty.Empty, error)
	// *
	// Retrieves the total number of lessons completed for a specific enrollment.
	// This is useful for tracking the learner's progress within a course.
	GetTotalCompletedLessons(context.Context, *GetTotalCompletedLessonsRequest) (*CompletedProgress, error)
	// *
	// Retrieves the total completed learning progress for all enrollments.
	// It returns a list of progress summaries for multiple enrollments.
	GetTotalCompletedProgress(context.Context, *GetTotalCompletedProgressRequest) (*GetTotalCompletedProgressResponse, error)
	// *
	// Lists all learning progress records for a specific enrollment.
	// This can be used to display the progress of all lessons within a course for a user.
	ListLearningProgress(context.Context, *ListLearningProgressRequest) (*ListLearningProgressResponse, error)
	// *
	// Updates the last accessed timestamp for a lesson.
	// This is used to track when a user revisits a completed lesson.
	UpdateLastAccessed(context.Context, *UpdateLastAccessedRequest) (*empty.Empty, error)
}

// UnimplementedLearningProgressServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLearningProgressServiceServer struct{}

func (UnimplementedLearningProgressServiceServer) MarkLessonAsCompleted(context.Context, *MarkLessonAsCompletedRequest) (*MarkLessonAsCompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkLessonAsCompleted not implemented")
}
func (UnimplementedLearningProgressServiceServer) ResetLessonMark(context.Context, *ResetLessonMarkRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetLessonMark not implemented")
}
func (UnimplementedLearningProgressServiceServer) ResetAllLessonMarks(context.Context, *ResetAllLessonMarksRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAllLessonMarks not implemented")
}
func (UnimplementedLearningProgressServiceServer) GetTotalCompletedLessons(context.Context, *GetTotalCompletedLessonsRequest) (*CompletedProgress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalCompletedLessons not implemented")
}
func (UnimplementedLearningProgressServiceServer) GetTotalCompletedProgress(context.Context, *GetTotalCompletedProgressRequest) (*GetTotalCompletedProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalCompletedProgress not implemented")
}
func (UnimplementedLearningProgressServiceServer) ListLearningProgress(context.Context, *ListLearningProgressRequest) (*ListLearningProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLearningProgress not implemented")
}
func (UnimplementedLearningProgressServiceServer) UpdateLastAccessed(context.Context, *UpdateLastAccessedRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLastAccessed not implemented")
}
func (UnimplementedLearningProgressServiceServer) testEmbeddedByValue() {}

// UnsafeLearningProgressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningProgressServiceServer will
// result in compilation errors.
type UnsafeLearningProgressServiceServer interface {
	mustEmbedUnimplementedLearningProgressServiceServer()
}

func RegisterLearningProgressServiceServer(s grpc.ServiceRegistrar, srv LearningProgressServiceServer) {
	// If the following call pancis, it indicates UnimplementedLearningProgressServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LearningProgressService_ServiceDesc, srv)
}

func _LearningProgressService_MarkLessonAsCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkLessonAsCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningProgressServiceServer).MarkLessonAsCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningProgressService_MarkLessonAsCompleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningProgressServiceServer).MarkLessonAsCompleted(ctx, req.(*MarkLessonAsCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningProgressService_ResetLessonMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetLessonMarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningProgressServiceServer).ResetLessonMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningProgressService_ResetLessonMark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningProgressServiceServer).ResetLessonMark(ctx, req.(*ResetLessonMarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningProgressService_ResetAllLessonMarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetAllLessonMarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningProgressServiceServer).ResetAllLessonMarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningProgressService_ResetAllLessonMarks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningProgressServiceServer).ResetAllLessonMarks(ctx, req.(*ResetAllLessonMarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningProgressService_GetTotalCompletedLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalCompletedLessonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningProgressServiceServer).GetTotalCompletedLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningProgressService_GetTotalCompletedLessons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningProgressServiceServer).GetTotalCompletedLessons(ctx, req.(*GetTotalCompletedLessonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningProgressService_GetTotalCompletedProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalCompletedProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningProgressServiceServer).GetTotalCompletedProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningProgressService_GetTotalCompletedProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningProgressServiceServer).GetTotalCompletedProgress(ctx, req.(*GetTotalCompletedProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningProgressService_ListLearningProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLearningProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningProgressServiceServer).ListLearningProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningProgressService_ListLearningProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningProgressServiceServer).ListLearningProgress(ctx, req.(*ListLearningProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningProgressService_UpdateLastAccessed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLastAccessedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningProgressServiceServer).UpdateLastAccessed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningProgressService_UpdateLastAccessed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningProgressServiceServer).UpdateLastAccessed(ctx, req.(*UpdateLastAccessedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LearningProgressService_ServiceDesc is the grpc.ServiceDesc for LearningProgressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearningProgressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "learning_progress.LearningProgressService",
	HandlerType: (*LearningProgressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MarkLessonAsCompleted",
			Handler:    _LearningProgressService_MarkLessonAsCompleted_Handler,
		},
		{
			MethodName: "ResetLessonMark",
			Handler:    _LearningProgressService_ResetLessonMark_Handler,
		},
		{
			MethodName: "ResetAllLessonMarks",
			Handler:    _LearningProgressService_ResetAllLessonMarks_Handler,
		},
		{
			MethodName: "GetTotalCompletedLessons",
			Handler:    _LearningProgressService_GetTotalCompletedLessons_Handler,
		},
		{
			MethodName: "GetTotalCompletedProgress",
			Handler:    _LearningProgressService_GetTotalCompletedProgress_Handler,
		},
		{
			MethodName: "ListLearningProgress",
			Handler:    _LearningProgressService_ListLearningProgress_Handler,
		},
		{
			MethodName: "UpdateLastAccessed",
			Handler:    _LearningProgressService_UpdateLastAccessed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "learning_progress.proto",
}
