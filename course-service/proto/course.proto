syntax = "proto3";
package course;
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
option go_package = "course-service/pb";


// Define the Course service for CRUD operations
service CourseService {
  // Create a new course
  rpc CreateCourse(CreateCourseRequest) returns (CreateCourseResponse);

  // Get a course by ID
  rpc GetCourseById(GetCourseByIdRequest) returns (Course);

  // Get courses by instructor ID
  rpc GetCoursesByInstructorID(GetCoursesByInstructorIDRequest) returns (GetCoursesByInstructorIDResponse);

  // Get courses by category
  rpc GetCoursesByCategory(GetCoursesByCategoryRequest) returns (GetCoursesByCategoryResponse);

  // List all active courses (exclude soft-deleted courses)
  rpc GetAllCourses(GetAllCoursesRequest) returns (GetAllCoursesResponse);

  // Check if a course exists by course ID
  rpc CheckCourseByID(CheckCourseByIDRequest) returns (CheckCourseByIDResponse);

  // Update a course by course ID
  rpc UpdateCourse(UpdateCourseRequest) returns (google.protobuf.Empty);

  // Delete (soft delete) a course by ID
  rpc DeleteCourse(DeleteCourseRequest) returns (google.protobuf.Empty);
}

// Message representing a course
message Course {
  uint32 id = 1;
  string title = 2;
  string description = 3;
  double price = 4;
  string thumbnail_url = 5;
  string instructor_id = 6;  // MongoDB ObjectId
  string category = 7;  // Enum: frontend, backend, etc.
  google.protobuf.Timestamp created_at = 8;  // ISO format timestamp
  google.protobuf.Timestamp updated_at = 9;
  google.protobuf.Timestamp deleted_at = 10;  // Nullable for soft deletes\
  float average_rating = 11;  // Average rating (1-5 scale)
  uint32 total_reviews = 12;  // Total number of reviews
}


// Create course request message
message CreateCourseRequest {
  string title = 1;
  string description = 2;
  double price = 3;
  string thumbnail_url = 4;
  string instructor_id = 5;  // MongoDB ObjectId
  string category = 6;
}

// Create course response message
message CreateCourseResponse {;
  uint32 id = 1;            // Returned course ID if successful
}

// Get course request message
message GetCourseByIdRequest {
  uint32 id = 1;  // Course ID
}

// List courses request message
message GetAllCoursesRequest {}

// List courses response message
message GetAllCoursesResponse {
  repeated Course courses = 1;
}

// Check if a course exists by ID request
message CheckCourseByIDRequest {
  uint32 course_id = 1;
}

// Check if a course exists by ID response
message CheckCourseByIDResponse {
  bool success = 1;  // True if the course exists
}

// Get courses by category request
message GetCoursesByCategoryRequest {
  string category = 1;
}

// Get courses by category response
message GetCoursesByCategoryResponse {
  repeated Course courses = 1;
}

// Get courses by instructor ID request
message GetCoursesByInstructorIDRequest {
  string instructor_id = 1;  // MongoDB ObjectId
}

// Get courses by instructor ID response
message GetCoursesByInstructorIDResponse {
  repeated Course courses = 1;
}


// Update course request message
message UpdateCourseRequest {
  uint32 id = 1;  // Course ID
  string title = 2;
  string description = 3;
  double price = 4;
  string thumbnail_url = 5;
  string instructor_id = 6;  // MongoDB ObjectId
  string category = 7;
}

// Delete course request message (soft delete)
message DeleteCourseRequest {
  uint32 id = 1;  // Course ID
}